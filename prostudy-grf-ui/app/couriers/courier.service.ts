import { Injectable } from '@angular/core';

import { GoogleEndpointService } from '../core/google-endpoint.service';
import { PartnerSchool } from '../partnerschool/partner-school';

export class GFCourier {
  autoGenerated: string;
  bookLineItemList: any[];
  bookQty: number;
  courierCost: number;
  courierDispatchDate: Date = new Date();
  courierDocketID: string;
  courierFrom: string;
  courierTo: string;
  courierName: string;
  courierPhone1: string;
  courierPhone2: string;
  courierType: string;
  id: string;
  instituteID: number;
  logistics: string;
  schoolName: any;
  totalFees: number;
  totalWeight: number;
  courierDispatchNotes: string;
}

@Injectable()
export class CourierSerivces {

  private gapi: any;
  constructor(private googleApiService: GoogleEndpointService) {
    this.gapi = googleApiService.getClient();
  }

  public addCourier(courier: GFCourier): Promise<GFCourier> {
    return new Promise(resolve => {
      this.googleApiService.getGAPI().client.gfCourierService.addGFCourier(courier).execute((data: GFCourier) => {
        resolve(data);
        console.log('data:' + data);
      });
    });
  }

  public getGFCourierByInstitute(instituteID: number): Promise<GFCourier[]> {
    console.log('Came to gfCourierService:getGFCourierByInstitute');
    // This is one way of calling async
    return new Promise(resolve => {
      // Simulate server latency with 2 second delay      
      this.googleApiService.getGAPI().client.gfCourierService.getGFCourierByInstitute(
        { 'instituteID': instituteID }).execute((data: any) => {
          console.log('data.items:' + data.items);
          resolve(data.items);
        });
    });
    //Second way ??
  }

  public getCourierByGRFNo(autoGenerated: string): Promise<GFCourier> {
    console.log('Came to gfCourierService:getCourierByGRFNo');
    // This is one way of calling async
    return new Promise(resolve => {
      // Simulate server latency with 2 second delay      
      this.googleApiService.getGAPI().client.gfCourierService.getCourierByGRFNo(
        { 'autoGenerated': autoGenerated }).execute((data: any) => {
          resolve(data.items[0]);
        });
    });
    //Second way ??
  }

  public getGFCourierById(id: string): Promise<GFCourier> {
    console.log('Came to gfCourierService:getCourierByGRFNo');
    // This is one way of calling async
    return new Promise(resolve => {
      // Simulate server latency with 2 second delay      
      this.googleApiService.getGAPI().client.gfCourierService.getGFCourierById(
        { 'id': id }).execute((data: any) => {
          resolve(data);
        });
    });
    //Second way ??
  }

  public getCourierByLogisticsType(courierLogistics: string): Promise<GFCourier> {
    // This is one way of calling async
    return new Promise(resolve => {
      // Simulate server latency with 2 second delay      
      this.googleApiService.getGAPI().client.gfCourierService.getCourierByLogisticsType(
        { 'logisticsType': courierLogistics }).execute((data: any) => {
          resolve(data.items);
        });
    });
    //Second way ??
  }

  public getCourierByDispatchDate(date: any): Promise<GFCourier> {
    // This is one way of calling async
    return new Promise(resolve => {
      // Simulate server latency with 2 second delay      
      this.googleApiService.getGAPI().client.gfCourierService.getCourierByDispatchDate(
        { 'dispatchDate': date }).execute((data: any) => {
          resolve(data.items);
        });
    });
    //Second way ??
  }
}