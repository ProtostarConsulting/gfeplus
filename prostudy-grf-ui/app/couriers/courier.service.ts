import { Injectable } from '@angular/core';

import { GoogleEndpointService } from '../core/google-endpoint.service';
import { PartnerSchool } from '../partnerschool/partner-school';

export class GFCourier {
    id:string;
    instituteID:number = 5910974510923776;
    courierType:string;
    logistics:string;
    registrationID:string;
    totalWeight:number;
    courierFrom:string = "Gandhi Foundation";
    courierTo:string;
    schoolName:PartnerSchool;
    courierDispatchDate:Date = new Date();
    bookQty:number;
    bookLineItemList:any[];
    otherLineItemList:any[];
    autoGenerated:string;
    totalFees:number;
    note:string;
    courierName:string;
    courierDocketID:string;
    courierCost:number;
    courierDispatchNotes:string;
    courierPhone1:string;
    courierPhone2:string;
}

@Injectable()
export class CourierSerivces {

    private gapi: any;
  constructor(private googleApiService: GoogleEndpointService) {
    this.gapi = googleApiService.getClient();  
  }

  public getGFCourierByInstitute(instituteID: number): Promise<GFCourier[]> {
    console.log('Came to gfCourierService:getGFCourierByInstitute');
    // This is one way of calling async
    return new Promise(resolve => {
      // Simulate server latency with 2 second delay      
      this.googleApiService.getGAPI().client.gfCourierService.getGFCourierByInstitute(
        { 'instituteID': instituteID }).execute((data: any) => {
          console.log('data.items:' + data.items);
          resolve(data.items);
        });
    });
    //Second way ??
  }
  
  public getCourierByGRFNo(autoGenerated: string): Promise<GFCourier> {
    console.log('Came to gfCourierService:getCourierByGRFNo');
    // This is one way of calling async
    return new Promise(resolve => {
      // Simulate server latency with 2 second delay      
      this.googleApiService.getGAPI().client.gfCourierService.getCourierByGRFNo(
        { 'autoGenerated': autoGenerated }).execute((data: any) => {
          resolve(data);
        });
    });
    //Second way ??
  }
}