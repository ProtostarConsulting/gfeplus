import { Component, Optional, OnInit } from '@angular/core';
import { MdDialog, MdDialogRef, MdSnackBar } from '@angular/material';
import { Router, ActivatedRoute, Params } from '@angular/router';

import { courierTypelist, logisticsList } from '../core/constant.app';
import { PartnerSchool } from '../partnerschool/partner-school';
import { PartnerSchoolService } from '../partnerschool/school.service';
import { CourierSerivces, GFCourier } from './courier.service';
import { GFBookStockService, GFBook } from '../gfbook/gfbook.service';

import { RouteData } from '../route-data.provider';

@Component({
    moduleId: module.id,
    selector: 'proerp-add-courier',
    templateUrl: './add-courier.component.html',
    styleUrls: ['./feature.component.css']
})

export class AddCourierComponent implements OnInit {

    id: string;
    addNewCourierSchoolGRFNo: string;
    tempCourierObj: GFCourier;
    school: PartnerSchool;
    bookStocks: Array<GFBook>;
    CourierType: string;
    Logistics: string;
    name: string;
    phone1: string;
    phone2: string;
    cost: number;
    docketID: string;
    note: string;
    courierDispatchDate: any;
    courierTypelist: string[];
    logisticsList: string[];
    tempQty: number;
    currentSchool: PartnerSchool;

    constructor(
        private route: ActivatedRoute,
        private router: Router,
        private routeData: RouteData,
        private courierservice: CourierSerivces,
        private partnerschoolservice: PartnerSchoolService,
        private gfbookService: GFBookStockService
    ) {
        this.courierTypelist = courierTypelist;
        this.logisticsList = logisticsList;
        console.log("inside add courier page");
        this.tempCourierObj = {
            id: '',
            instituteID: 5910974510923776,
            autoGenerated: '',
            courierCost: 0,
            courierDocketID: '',
            courierName: '',
            courierPhone1: '',
            courierPhone2: '',
            courierType: '',
            logistics: '',
            totalWeight: 0,
            courierFrom: '',
            courierTo: '',
            schoolName: new PartnerSchool(),
            totalFees: 0,
            courierDispatchDate: new Date(),
            bookQty: 0,
            bookLineItemList: [],
            courierDispatchNotes: ''
        };
    }

    ngOnInit() {
        if (this.routeData.params.selectedCourierID) {
            this.id = this.routeData.params.selectedCourierID;
            this.getGFCourierById(this.id);
            // Clean the data from routeData 
            this.routeData.params.selectedCourierID = null;
        }
        else {
            if (this.routeData.params.schoolGRFNo) {
                this.addNewCourierSchoolGRFNo = this.routeData.params.schoolGRFNo;
                this.tempCourierObj.autoGenerated = this.addNewCourierSchoolGRFNo;

                this.getInstituteByGRFNo(this.addNewCourierSchoolGRFNo);
                this.getGFBookStockByInstituteId();
            }
        }
    }

    addCourier() {
        if (this.tempCourierObj.id) {
            this.tempCourierObj.courierName = this.name;
            this.tempCourierObj.courierDocketID = this.docketID;
            this.tempCourierObj.courierPhone1 = this.phone1;
            this.tempCourierObj.courierPhone2 = this.phone2;
            this.tempCourierObj.courierCost = this.cost;
            this.tempCourierObj.courierDispatchNotes = this.note;
            this.tempCourierObj.courierDispatchDate = this.courierDispatchDate;
            this.tempCourierObj.schoolName = this.currentSchool;
        }
        else {
            this.tempCourierObj.schoolName = this.school;
            this.tempCourierObj.courierType = this.CourierType;
            this.tempCourierObj.logistics = this.Logistics;
        }

        this.courierservice.addCourier(this.tempCourierObj).then(courierObj => {
            this.tempCourierObj = courierObj;
            if (this.tempCourierObj) {
                this.router.navigate(['/courier-index/listcourier']);
            }
        });
    }

    getGFCourierById(id: string) {
        this.courierservice.getGFCourierById(id).then(list => {
            this.tempCourierObj = list;
            this.currentSchool = this.tempCourierObj.schoolName;
            this.name = this.tempCourierObj.courierName;
            this.docketID = this.tempCourierObj.courierDocketID;
            this.phone1 = this.tempCourierObj.courierPhone1;
            this.phone2 = this.tempCourierObj.courierPhone2;
            this.cost = this.tempCourierObj.courierCost;
            this.note = this.tempCourierObj.courierDispatchNotes;
            this.courierDispatchDate = new Date(this.tempCourierObj.courierDispatchDate);
        });
    }

    getInstituteByGRFNo(autoGenerated: string) {
        this.tempCourierObj.schoolName = new PartnerSchool();
        this.tempCourierObj.courierFrom = "";
        this.tempCourierObj.courierTo = "";
        this.tempCourierObj.autoGenerated = autoGenerated;
        this.partnerschoolservice.getInstituteByGRFNo(autoGenerated).then(list => {
            //this.school = list.items[0];

            this.tempCourierObj.schoolName = this.school.schoolName;
            this.tempCourierObj.courierTo = this.school.schoolName
                + ", "
                + this.school.address.line1
                + ", "
                + this.school.address.city
                + ", "
                + this.school.address.pin;
            this.tempCourierObj.courierFrom = "Protostar, E101, MG Apts, Kasarwadi, Pune";
        });
    }

    addBook() {
        let item = {
            srNo: this.tempCourierObj.bookLineItemList.length + 1,
            bookName: "",
            bookAuther: "",
            weight: "",
            bookPrice: "",
            bookQty: 1
        };
        this.tempCourierObj.bookLineItemList.push(item);
    }

    lineItemStockChange(index: number, stockItem: any) {

        let lineSelectedItem = this.tempCourierObj.bookLineItemList[index];
        lineSelectedItem.id = stockItem.id;
        lineSelectedItem.bookName = stockItem.bookName;
        lineSelectedItem.bookPrice = stockItem.bookPrice;
        lineSelectedItem.bookAuther = stockItem.bookAuther;
        lineSelectedItem.weight = stockItem.weight;

        this.calBookWeight();
    }

    checkBookStock(item: any) {
        for (let i = 0; i < this.bookStocks.length; i++) {
            if (item.id == this.bookStocks[i].id) {
                if (this.bookStocks[i].bookQty < item.bookQty) {
                    item.bookQty = 1;
                    item.bkQty = this.bookStocks[i].bookQty;
                }
                this.tempQty = this.bookStocks[i].bookQty - item.bookQty;
            }
        }
    }

    calBookWeight() {
        this.tempCourierObj.totalWeight = 0;
        this.tempCourierObj.totalFees = 0;

        for (let i = 0; i < this.tempCourierObj.bookLineItemList.length; i++) {
            let line = this.tempCourierObj.bookLineItemList[i];

            this.tempCourierObj.totalWeight += (line.bookQty * line.weight);
            this.tempCourierObj.totalFees += (line.bookQty * line.bookPrice);
        }

        return this.tempCourierObj.totalWeight;
    }

    removeBook(index: number) {
        this.tempCourierObj.bookLineItemList.splice(index, 1);
        this.calBookWeight();
    }

    getGFBookStockByInstituteId(): void {
        this.gfbookService.getGFBookByInstituteId(this.tempCourierObj.instituteID).then(list => {
            this.bookStocks = list;
        });
    }

    gotolistCourier() {
        this.router.navigate(['/courier-index/listcourier']);
    }
}