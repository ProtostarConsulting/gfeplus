import { Component, Optional, OnInit } from '@angular/core';
import { MdDialog, MdDialogRef, MdSnackBar } from '@angular/material';
import { Router, ActivatedRoute, Params } from '@angular/router';
import 'rxjs/add/operator/switchMap';
import { Observable } from 'rxjs/Observable';
import { Http, RequestOptions, URLSearchParams, ResponseContentType} from '@angular/http';

import { RouteData } from '../route-data.provider';

import { GfStudentService, GFStudent } from '../gfStudent/gfStudent.service';
import { ExamResult } from './examresult';
import { PartnerSchoolService } from '../partnerschool/school.service';
import { GFBookStockService, GFBook } from '../gfbook/gfbook.service';
import { PartnerSchool, CoordinatorDetail, BookDetail } from '../partnerschool/partner-school';

@Component({
    moduleId: module.id,
    selector: 'proerp-add-examresult',
    templateUrl: './add-examresult.component.html',
    styleUrls: ['./feature.component.css']
})

export class AddExamResultComponent {

    instituteID: number = 5910974510923776;
    data: any;
    foundSchool: PartnerSchool;
    coordinatorDetail: CoordinatorDetail;
    curUser: boolean;
    bookDetailList: BookDetail[];
    examResultList: ExamResult[];
    currentSchoolStandardList: any;
    bookStocks: GFBook[];
    reviewByGrfRegNo: string;
    foundIndexList: any;
    foundResultList: any;

    constructor(
        private route: ActivatedRoute,
        private router: Router,
        private routeData: RouteData,
        private partnerschoolservice: PartnerSchoolService,
        private gfstudentservice: GfStudentService,
        private gfbookService: GFBookStockService,
        private http: Http
    ) {
        this.curUser = true;
        this.data = {
            grfRegNo: '',
            coordinatorMobileNumberEntered: '',
            foundValidRecord: false,
            errorMsg: '',
            guestSuccessMsg: ''
        };
        this.bookStocks = [];
    }

    ngOnInit() {
        if (this.routeData.params.reviewByGrfRegNo) {
            this.reviewByGrfRegNo = this.routeData.params.reviewByGrfRegNo;
            // Clean the data from routeData
            if (this.reviewByGrfRegNo) {
                this.grfRegNoChange(this.reviewByGrfRegNo);
            }
            this.routeData.params.reviewByGrfRegNo = null;
        }
        this.getGFBookStockByInstituteId();
    }

    getResultListFor = function (std: string) {
        let tempExamResultList: any = [];
        this.examResultList.forEach((examresultOnj: any) => {
            if (std == examresultOnj.standard) {
                tempExamResultList.push(examresultOnj);
            }
        });
        return tempExamResultList;
    }

    grfRegNoChange(autoGenerated: string) {

        this.examResultList = [];
        this.currentSchoolStandardList = [];
        this.foundSchool = null;
        this.data.foundValidRecord = false;
        this.data.guestSuccessMsg = '';
        this.partnerschoolservice.getInstituteByGRFNo(autoGenerated).then(schoolObj => {
            if (schoolObj) {
                this.foundSchool = schoolObj;
            }
            if (this.foundSchool == null) {
                this.data.errorMsg = "This GRF. Reg. No. is not found. Please correct it and try. Please contact GRF office.";
                return;
            }
            else {
                let studPerStd = 3;
                let contactDetail = this.foundSchool.contactDetail;
                this.coordinatorDetail = null;
                if (contactDetail.coordinatorDetail != undefined
                    && contactDetail.coordinatorDetail.length > 0) {
                    this.coordinatorDetail = contactDetail.coordinatorDetail[0];
                }
                var userEnteredCoOrdMobileNo = '91'
                    + this.data.coordinatorMobileNumberEntered;

                if (!this.curUser && (this.coordinatorDetail == null || userEnteredCoOrdMobileNo
                    .indexOf(this.coordinatorDetail.coordinatorMobileNum) == -1)) {
                    this.data.errorMsg = "Entered co-ordinator number did not match with our records. Please contact GRF office.";
                    return;
                }

                this.bookDetailList = this.getBookDetailList(this.foundSchool);

                if (this.bookDetailList == null) {
                    this.data.errorMsg = "There are no book details associated with this school/college. Please contact GRF office.";
                    this.foundSchool = null;
                    return;
                }

                // Get ResultList if already
                // entered.
                this.gfstudentservice.serachExamResultEntitiesBySchool(this.foundSchool).then(resp => {
                    this.bookDetailList.forEach((book: any) => {

                        if (this.currentSchoolStandardList
                            .indexOf(book.standard) == -1) {
                            this.currentSchoolStandardList
                                .push(book.standard);

                            this.foundResultList = [];

                            if (resp) {
                                this.foundResultList = this.getExistingResultListForStd(resp,
                                    book.standard);
                                if (this.foundResultList.length > 0) {
                                    this.examResultList = this.examResultList
                                        .concat(this.foundResultList);

                                }
                            }

                            for (var i = 1; i <= (studPerStd - this.foundResultList.length); i++) {
                                this.examResultList
                                    .push(this.getEmptyExamResult(this.foundSchool, book.standard));
                            }
                        }
                    });
                    this.data.foundValidRecord = true;
                });
            }
        });
    }

    year1: string;
    getBookDetailList = function (school: PartnerSchool) {
        if (this.year1 == undefined) {
            let date1 = new Date(2016, 11, 11);
            let year = date1.getFullYear();
            this.year1 = year.toString().substr(2, 2);
            this.year1 = date1.getFullYear() + "-"
                + (Number(this.year1) + 1);
        }
        this.bookDetailList = [];
        for (let q = 0; q < school.examDetailList.length; q++) {
            if (school.examDetailList[q].yearOfExam == this.year1) {
                if (school.examDetailList[q].bookSummary) {
                    this.bookDetailList = school.examDetailList[q].bookSummary.bookDetail;
                    this.examDetail = school.examDetailList[q];
                } else {
                    return null;
                }
            }
        }
        return this.bookDetailList;
    }

    addExamResultList() {

        let resultWrapper = {
            list: this.examResultList,
            school: this.foundSchool
        };
        this.gfstudentservice.addExamResults(resultWrapper).then(data => {
            if (this.reviewByGrfRegNo) {
                this.data.guestSuccessMsg = "Data saved successfully. If any question, please contact GRF office. Thank you.";
            } else {
                this.data.guestSuccessMsg = "Data is not saved successfully. If any question, please contact GRF office. Thank you.";
            }
        });
    }

    getExistingResultListForStd(resultList: any, std: string) {
        let foundResultList: any = [];
        resultList.forEach((resultObj: any) => {
            if (resultObj.standard == std)
                foundResultList.push(resultObj);
        });
        return foundResultList;
    }

    getEmptyExamResult = function (school: PartnerSchool, standard: string) {
        return {
            id: '',
            createdDate: new Date(),
            standard: standard,
            studName: '',
            mediumOfAnswer: '',
            marks: '',
            school: school,
            examYear: this.examDetail.yearOfExam,
            grfReviewed: this.curUser ? true : false
        };
    }

    addMoreStudent = function (std: string) {
        for (let i = 1; i <= 5; i++) {
            this.examResultList
                .push(this.getEmptyExamResult(
                    this.foundSchool, std));
        }
    }

    removeStudent = function (std: string) {
        this.foundIndexList = [];
        for (let i = 0; i < this.examResultList.length; i++) {
            if (this.examResultList[i].standard == std) {
                this.foundIndexList.push(i);
            }
        }
        this.examResultList.splice(this.foundIndexList[this.foundIndexList.length - 1], 1);
        //remove last row for given std
    }

    getGFBookStockByInstituteId() {
        this.gfbookService.getGFBookByInstituteId(this.instituteID).then(list => {
            this.bookStocks = list;
        });
    }

    getGFBookByID(id: string) {
        let foundBook = {};
        this.bookStocks.forEach((bookObj) => {
            if (bookObj.id == id) {
                foundBook = bookObj;
            }
        });

        return foundBook;
    }

    saveReviewedExamResultList() {
        this.examResultList
            .forEach((resultObj) => {
                resultObj.grfReviewed = true;
            });
        this.addExamResultList();
    }

    downloadCertificate(id: string) {
        let params = new URLSearchParams();
        params.set('examID', id);
        return this.http.get('http://localhost:8888/PrintCertificatePdf', { search: params, responseType: ResponseContentType.Blob  })
            .toPromise()
            .then((response) => {
                let headers = response.headers;
                console.log("headers: " + headers);
                let data1 = response.blob();
                let saveAs = require('file-saver');
                let blob = new Blob([data1], { type: 'application/pdf' });
                saveAs(blob, "Certificate" + new Date().toLocaleDateString() + ".pdf");
                let url = window.URL.createObjectURL(blob);
                window.open(url);
            })
            .catch(this.handleError);
    }

    private handleError(error: any): Promise<any> {
        console.error('An error occurred', error); // for demo purposes only
        return Promise.reject(error.message || error);
    }

    getStandardLabelStyle(): any {
        return {
            'padding-top': '5px'
        };

    }
    getStudNameStyle(): any {
        return {
            'padding-left': '100px',
            'padding-right': '50px',
        };

    }

    getFormRowStyle(): any {
        return {
            'padding-top': '1px',
            'padding-bottom': '2px'
        };
    }

    getTableStyle(): any {
        return {
            'border-collapse': 'collapse',
            'border': '1px solid black',
            'padding-left': '5px',
            'padding-right': '5px',
            'padding-top': '5px'
        };
    }
}